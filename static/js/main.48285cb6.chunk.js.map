{"version":3,"sources":["components/Weather/Form/Form.js","components/Weather/Result/Result.js","components/Weather/Weather.js","components/Background/Background.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","submit","className","onChange","inputChange","value","inputValue","type","placeholder","Result","_props$weather","weather","date","time","city","sunrise","sunset","temperature","pressure","wind","country","result","error","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","concat","Weather","Weather_Form_Form","Weather_Result_Result","Background","APIkey","App","state","handleInputChange","e","_this","setState","target","console","log","handleSubmitShowWeather","preventDefault","API","fetch","then","resp","ok","Error","json","data","toLocaleDateString","prevState","sys","main","temp","speed","catch","components_Background_Background","components_Weather_Weather","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48285cb6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css'\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.submit} className=\"form\">\r\n            <input className=\"input\" onChange={props.inputChange} value={props.inputValue} type=\"text\" placeholder=\"Wpisz miasto...\" />\r\n            <button className=\"btn\">Pobierz pogodę</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Result.css';\r\n\r\nconst Result = (props) => {\r\n\r\n    const { date, time, city, sunrise, sunset, temperature, pressure, wind, country } = props.weather;\r\n\r\n    let result = null;\r\n\r\n    if (!props.error && city) {\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n        result = (\r\n            <>\r\n                <p>Miasto: <strong>{city}</strong></p>\r\n                <p>Kraj: <strong>{country}</strong></p>\r\n                <p>Godzina pobrania danych: <strong>{time}</strong></p>\r\n                <p>Dane z dnia: <strong>{date}</strong></p>\r\n                <p>Wschód słońca: <strong>{sunriseTime}</strong></p>\r\n                <p>Zachód słońca: <strong>{sunsetTime}</strong></p>\r\n                <p>Siła wiatru: <strong>{wind} m/s</strong> </p>\r\n                <p>Temperatura: <strong>{temperature} &#176;C</strong></p>\r\n                <p>Ciśnienie: <strong>{pressure} hPa</strong></p>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            {props.error ? `Nie ma takiego miasta ${city}` : result}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport Form from './Form/Form';\r\nimport Result from './Result/Result';\r\n\r\nconst Weather = (props) => {\r\n\r\n    return (\r\n        <div className=\"weather-app\">\r\n            <Form\r\n                inputValue={props.inputValue}\r\n                inputChange={props.inputChange}\r\n                submit={props.submit}\r\n            />\r\n            <Result\r\n                weather={props.weather}\r\n                error={props.error}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './Background.css'\r\n\r\nconst Background = () => {\r\n    return (\r\n        <div className=\"backgroundWrapper\">\r\n            <h1 className=\"backgroundWrapper__title\">Pogoda</h1>\r\n            <p className=\"backgroundWrapper__description\">Najważniejsze informacje pogodowe dla twojego miasta</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Background;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Weather from './Weather/Weather';\nimport Background from './Background/Background';\n\nconst APIkey = \"de644c6a453a70ee84ec60c65972ef45\";\n\nclass App extends Component {\n\n\n  state = {\n    inputValue: '',\n    weather: {\n      date: \"\",\n      time: \"\",\n      city: \"\",\n      country: '',\n      sunrise: \"\",\n      sunset: \"\",\n      temperature: \"\",\n      pressure: \"\",\n      wind: '',\n    },\n    error: false,\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      inputValue: e.target.value,\n    });\n    console.log(this.state.city);\n  }\n\n  handleSubmitShowWeather = (e) => {\n    e.preventDefault();\n\n\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.inputValue}&APPID=${APIkey}&units=metric`;\n\n    fetch(API)\n      .then(resp => {\n        if (resp.ok) return resp;\n        throw Error(\"Problem z połączeniem!!!\");\n      })\n      .then(resp => resp.json())\n      .then(data => {\n        const time = new Date().toLocaleTimeString();\n        const date = new Date().toLocaleDateString();\n        this.setState(prevState => ({\n          weather: {\n            date: date,\n            time: time,\n            city: prevState.inputValue,\n            country: data.sys.country,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temperature: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n          },\n          error: false,\n        }))\n      })\n      .catch(error => {\n        this.setState(prevState => ({\n          error: true,\n          weather: {\n            city: prevState.inputValue\n          }\n        }))\n        console.log(error);\n      })\n  }\n\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n\n        <Background />\n\n        <Weather\n          inputValue={this.state.inputValue}\n          inputChange={this.handleInputChange}\n          submit={this.handleSubmitShowWeather}\n          error={this.state.error}\n          weather={this.state.weather}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}